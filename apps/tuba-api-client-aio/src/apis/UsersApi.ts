/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  BadRequestException,
  ConflictDto,
  HealthCheckDto,
  InternalServerErrorException,
  UnauthorizedException,
  UserDto,
  UserNewDto,
  UserSearchFilterDto,
  UserSearchResultDto,
  UserUpdDto,
} from '../models/index'
import {
  BadRequestExceptionFromJSON,
  BadRequestExceptionToJSON,
  ConflictDtoFromJSON,
  ConflictDtoToJSON,
  HealthCheckDtoFromJSON,
  HealthCheckDtoToJSON,
  InternalServerErrorExceptionFromJSON,
  InternalServerErrorExceptionToJSON,
  UnauthorizedExceptionFromJSON,
  UnauthorizedExceptionToJSON,
  UserDtoFromJSON,
  UserDtoToJSON,
  UserNewDtoFromJSON,
  UserNewDtoToJSON,
  UserSearchFilterDtoFromJSON,
  UserSearchFilterDtoToJSON,
  UserSearchResultDtoFromJSON,
  UserSearchResultDtoToJSON,
  UserUpdDtoFromJSON,
  UserUpdDtoToJSON,
} from '../models/index'

export interface CheckUserInfoRequest {
  userNewDto: UserNewDto
  xCorrelationId?: any
}

export interface CreateUserRequest {
  userNewDto: UserNewDto
  xCorrelationId?: any
}

export interface DeleteUserRequest {
  id: number
  xCorrelationId?: any
}

export interface GetHealthUserRequest {
  xCorrelationId?: any
}

export interface GetUserByIdRequest {
  id: number
  xCorrelationId?: any
}

export interface GetUserCurrentRequest {
  xCorrelationId?: any
}

export interface GetUsersAllRequest {
  xCorrelationId?: any
}

export interface SearchUsersRequest {
  userSearchFilterDto: UserSearchFilterDto
  xCorrelationId?: any
}

export interface UpdateUserPartialRequest {
  id: number
  userUpdDto: UserUpdDto
  xCorrelationId?: any
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
  /**
   * Validate the new or edited info of user profile: uniqueness, already used email or wallet addresses, etc
   * Validate User Info
   */
  async checkUserInfoRaw(
    requestParameters: CheckUserInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ConflictDto>>> {
    if (requestParameters['userNewDto'] == null) {
      throw new runtime.RequiredError(
        'userNewDto',
        'Required parameter "userNewDto" was null or undefined when calling checkUserInfo().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/check`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserNewDtoToJSON(requestParameters['userNewDto']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ConflictDtoFromJSON),
    )
  }

  /**
   * Validate the new or edited info of user profile: uniqueness, already used email or wallet addresses, etc
   * Validate User Info
   */
  async checkUserInfo(
    requestParameters: CheckUserInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ConflictDto>> {
    const response = await this.checkUserInfoRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Create a new user profile, by providing the required information.
   * Create User
   */
  async createUserRaw(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDto>> {
    if (requestParameters['userNewDto'] == null) {
      throw new runtime.RequiredError(
        'userNewDto',
        'Required parameter "userNewDto" was null or undefined when calling createUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserNewDtoToJSON(requestParameters['userNewDto']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue),
    )
  }

  /**
   * Create a new user profile, by providing the required information.
   * Create User
   */
  async createUser(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDto> {
    const response = await this.createUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Remove a user from the system, by specifying its unique ID.  Only the user itself can delete its own profile, or a privileged user with admin rights.
   * Delete User
   */
  async deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling deleteUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue),
    )
  }

  /**
   * Remove a user from the system, by specifying its unique ID.  Only the user itself can delete its own profile, or a privileged user with admin rights.
   * Delete User
   */
  async deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDto> {
    const response = await this.deleteUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Check the service status and health.  The returned HTTP status code reflects the working state of the service.  The details of the service status and of its statuses is reported in the response data.  If the service fails to connect to its database, it will exit.
   * Service Health Check
   */
  async getHealthUserRaw(
    requestParameters: GetHealthUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HealthCheckDto>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/health`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthCheckDtoFromJSON(jsonValue),
    )
  }

  /**
   * Check the service status and health.  The returned HTTP status code reflects the working state of the service.  The details of the service status and of its statuses is reported in the response data.  If the service fails to connect to its database, it will exit.
   * Service Health Check
   */
  async getHealthUser(
    requestParameters: GetHealthUserRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HealthCheckDto> {
    const response = await this.getHealthUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieve a user profile based on its unique ID.
   * Get User
   */
  async getUserByIdRaw(
    requestParameters: GetUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getUserById().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue),
    )
  }

  /**
   * Retrieve a user profile based on its unique ID.
   * Get User
   */
  async getUserById(
    requestParameters: GetUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDto> {
    const response = await this.getUserByIdRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieve profile info of the requesting user (authenticated).
   * Get actual User
   */
  async getUserCurrentRaw(
    requestParameters: GetUserCurrentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDto>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearer', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/v1/users/current`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue),
    )
  }

  /**
   * Retrieve profile info of the requesting user (authenticated).
   * Get actual User
   */
  async getUserCurrent(
    requestParameters: GetUserCurrentRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDto> {
    const response = await this.getUserCurrentRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get a list of all registered users.  Requester must have admin privileges.
   * List all users
   */
  async getUsersAllRaw(
    requestParameters: GetUsersAllRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<UserDto>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserDtoFromJSON),
    )
  }

  /**
   * Get a list of all registered users.  Requester must have admin privileges.
   * List all users
   */
  async getUsersAll(
    requestParameters: GetUsersAllRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<UserDto>> {
    const response = await this.getUsersAllRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Search for users by their ID or associated accounts (email, crypto or social).
   * Search for Users
   */
  async searchUsersRaw(
    requestParameters: SearchUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserSearchResultDto>> {
    if (requestParameters['userSearchFilterDto'] == null) {
      throw new runtime.RequiredError(
        'userSearchFilterDto',
        'Required parameter "userSearchFilterDto" was null or undefined when calling searchUsers().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/search`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserSearchFilterDtoToJSON(requestParameters['userSearchFilterDto']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserSearchResultDtoFromJSON(jsonValue),
    )
  }

  /**
   * Search for users by their ID or associated accounts (email, crypto or social).
   * Search for Users
   */
  async searchUsers(
    requestParameters: SearchUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserSearchResultDto> {
    const response = await this.searchUsersRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Update partially the profile information of a user, by specifying its unique ID & the data set(s) to change.
   * Update User
   */
  async updateUserPartialRaw(
    requestParameters: UpdateUserPartialRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDto>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling updateUserPartial().',
      )
    }

    if (requestParameters['userUpdDto'] == null) {
      throw new runtime.RequiredError(
        'userUpdDto',
        'Required parameter "userUpdDto" was null or undefined when calling updateUserPartial().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters['xCorrelationId'] != null) {
      headerParameters['x-correlation-id'] = String(
        requestParameters['xCorrelationId'],
      )
    }

    const response = await this.request(
      {
        path: `/v1/users/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdDtoToJSON(requestParameters['userUpdDto']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue),
    )
  }

  /**
   * Update partially the profile information of a user, by specifying its unique ID & the data set(s) to change.
   * Update User
   */
  async updateUserPartial(
    requestParameters: UpdateUserPartialRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDto> {
    const response = await this.updateUserPartialRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}

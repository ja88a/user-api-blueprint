/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface UserAccountIdDto
 */
export interface UserAccountIdDto {
  /**
   * Unique user account ID.
   *
   * Alternatively, the user's unique email or crypto account address can be used for identification, refer to `identifier` and `type`
   * @type {number}
   * @memberof UserAccountIdDto
   */
  id?: number
  /**
   * User account unique identifier, e.g. email, crypto account address, social network handle, etc
   *
   * Alternative to specifying the user `id` field. When specified, the `type` field must also be set
   * @type {string}
   * @memberof UserAccountIdDto
   */
  identifier?: string
  /**
   * Type of account
   * @type {string}
   * @memberof UserAccountIdDto
   */
  type?: UserAccountIdDtoTypeEnum
}

/**
 * @export
 */
export const UserAccountIdDtoTypeEnum = {
  Wallet: 'wallet',
  Email: 'email',
} as const
export type UserAccountIdDtoTypeEnum =
  (typeof UserAccountIdDtoTypeEnum)[keyof typeof UserAccountIdDtoTypeEnum]

/**
 * Check if a given object implements the UserAccountIdDto interface.
 */
export function instanceOfUserAccountIdDto(value: object): boolean {
  return true
}

export function UserAccountIdDtoFromJSON(json: any): UserAccountIdDto {
  return UserAccountIdDtoFromJSONTyped(json, false)
}

export function UserAccountIdDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UserAccountIdDto {
  if (json == null) {
    return json
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    identifier: json['identifier'] == null ? undefined : json['identifier'],
    type: json['type'] == null ? undefined : json['type'],
  }
}

export function UserAccountIdDtoToJSON(value?: UserAccountIdDto | null): any {
  if (value == null) {
    return value
  }
  return {
    id: value['id'],
    identifier: value['identifier'],
    type: value['type'],
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { UserAccountNewDto } from './UserAccountNewDto'
import {
  UserAccountNewDtoFromJSON,
  UserAccountNewDtoFromJSONTyped,
  UserAccountNewDtoToJSON,
} from './UserAccountNewDto'

/**
 *
 * @export
 * @interface UserNewDto
 */
export interface UserNewDto {
  /**
   * User display name, or first name.
   *
   * If not specified, a default one will be generated from the associated account(s).
   * @type {string}
   * @memberof UserNewDto
   */
  name?: string
  /**
   * Optional user last / family name
   * @type {string}
   * @memberof UserNewDto
   */
  nameLast?: string
  /**
   * User profile type.
   *
   * If not specified, user will be created as an individual.
   * @type {string}
   * @memberof UserNewDto
   */
  type?: UserNewDtoTypeEnum
  /**
   * User associated sub-accounts: crypto wallet account (EOA), email, social network, oauth2, etc
   * @type {Array<UserAccountNewDto>}
   * @memberof UserNewDto
   */
  account: Array<UserAccountNewDto>
}

/**
 * @export
 */
export const UserNewDtoTypeEnum = {
  Individual: 'individual',
  Business: 'business',
} as const
export type UserNewDtoTypeEnum =
  (typeof UserNewDtoTypeEnum)[keyof typeof UserNewDtoTypeEnum]

/**
 * Check if a given object implements the UserNewDto interface.
 */
export function instanceOfUserNewDto(value: object): boolean {
  if (!('account' in value)) return false
  return true
}

export function UserNewDtoFromJSON(json: any): UserNewDto {
  return UserNewDtoFromJSONTyped(json, false)
}

export function UserNewDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UserNewDto {
  if (json == null) {
    return json
  }
  return {
    name: json['name'] == null ? undefined : json['name'],
    nameLast: json['nameLast'] == null ? undefined : json['nameLast'],
    type: json['type'] == null ? undefined : json['type'],
    account: (json['account'] as Array<any>).map(UserAccountNewDtoFromJSON),
  }
}

export function UserNewDtoToJSON(value?: UserNewDto | null): any {
  if (value == null) {
    return value
  }
  return {
    name: value['name'],
    nameLast: value['nameLast'],
    type: value['type'],
    account: (value['account'] as Array<any>).map(UserAccountNewDtoToJSON),
  }
}

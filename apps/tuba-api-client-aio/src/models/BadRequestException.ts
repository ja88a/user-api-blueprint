/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
  /**
   * Timestamp of the exception
   * @type {Date}
   * @memberof BadRequestException
   */
  timestamp: Date
  /**
   * Trace ID of the request
   * @type {string}
   * @memberof BadRequestException
   */
  traceId: string
  /**
   * A unique code identifying the error.
   * @type {number}
   * @memberof BadRequestException
   */
  code: BadRequestExceptionCodeEnum
  /**
   * Message for the exception
   * @type {string}
   * @memberof BadRequestException
   */
  message: string
  /**
   * A description of the error message.
   * @type {string}
   * @memberof BadRequestException
   */
  description: string
}

/**
 * @export
 */
export const BadRequestExceptionCodeEnum = {
  NUMBER_10001: 10001,
  NUMBER_10002: 10002,
  NUMBER_10003: 10003,
  NUMBER_10004: 10004,
  NUMBER_10005: 10005,
  NUMBER_10006: 10006,
  NUMBER_10007: 10007,
  NUMBER_10008: 10008,
  NUMBER_10009: 10009,
  NUMBER_10010: 10010,
  NUMBER_10011: 10011,
  NUMBER_10012: 10012,
  NUMBER_10013: 10013,
  NUMBER_10014: 10014,
  NUMBER_10015: 10015,
  NUMBER_10016: 10016,
} as const
export type BadRequestExceptionCodeEnum =
  (typeof BadRequestExceptionCodeEnum)[keyof typeof BadRequestExceptionCodeEnum]

/**
 * Check if a given object implements the BadRequestException interface.
 */
export function instanceOfBadRequestException(value: object): boolean {
  if (!('timestamp' in value)) return false
  if (!('traceId' in value)) return false
  if (!('code' in value)) return false
  if (!('message' in value)) return false
  if (!('description' in value)) return false
  return true
}

export function BadRequestExceptionFromJSON(json: any): BadRequestException {
  return BadRequestExceptionFromJSONTyped(json, false)
}

export function BadRequestExceptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): BadRequestException {
  if (json == null) {
    return json
  }
  return {
    timestamp: new Date(json['timestamp']),
    traceId: json['traceId'],
    code: json['code'],
    message: json['message'],
    description: json['description'],
  }
}

export function BadRequestExceptionToJSON(value?: BadRequestException | null): any {
  if (value == null) {
    return value
  }
  return {
    timestamp: value['timestamp'].toISOString(),
    traceId: value['traceId'],
    code: value['code'],
    message: value['message'],
    description: value['description'],
  }
}

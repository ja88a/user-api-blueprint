/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { UserIdDto } from './UserIdDto'
import {
  UserIdDtoFromJSON,
  UserIdDtoFromJSONTyped,
  UserIdDtoToJSON,
} from './UserIdDto'

/**
 *
 * @export
 * @interface UserSearchFilterDto
 */
export interface UserSearchFilterDto {
  /**
   * Reference(s) to users to search for, via their ID or associated account(s)
   * @type {Array<UserIdDto>}
   * @memberof UserSearchFilterDto
   */
  user: Array<UserIdDto>
  /**
   * Optional specification of sub-entities dataset to be included in the search results.
   *
   * If not specified, then only the reference ID of related entities are provided.
   * @type {Array<string>}
   * @memberof UserSearchFilterDto
   */
  subEntities?: Array<UserSearchFilterDtoSubEntitiesEnum>
}

/**
 * @export
 */
export const UserSearchFilterDtoSubEntitiesEnum = {
  Info: 'user-info',
  Account: 'user-account',
} as const
export type UserSearchFilterDtoSubEntitiesEnum =
  (typeof UserSearchFilterDtoSubEntitiesEnum)[keyof typeof UserSearchFilterDtoSubEntitiesEnum]

/**
 * Check if a given object implements the UserSearchFilterDto interface.
 */
export function instanceOfUserSearchFilterDto(value: object): boolean {
  if (!('user' in value)) return false
  return true
}

export function UserSearchFilterDtoFromJSON(json: any): UserSearchFilterDto {
  return UserSearchFilterDtoFromJSONTyped(json, false)
}

export function UserSearchFilterDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UserSearchFilterDto {
  if (json == null) {
    return json
  }
  return {
    user: (json['user'] as Array<any>).map(UserIdDtoFromJSON),
    subEntities: json['subEntities'] == null ? undefined : json['subEntities'],
  }
}

export function UserSearchFilterDtoToJSON(value?: UserSearchFilterDto | null): any {
  if (value == null) {
    return value
  }
  return {
    user: (value['user'] as Array<any>).map(UserIdDtoToJSON),
    subEntities: value['subEntities'],
  }
}

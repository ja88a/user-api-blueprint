/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { UserAccountDto } from './UserAccountDto'
import {
  UserAccountDtoFromJSON,
  UserAccountDtoFromJSONTyped,
  UserAccountDtoToJSON,
} from './UserAccountDto'

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   * User display name, or first name.
   *
   * If not specified, a default one will be generated from the associated account(s).
   * @type {string}
   * @memberof UserDto
   */
  name: string
  /**
   * Optional user last / family name
   * @type {string}
   * @memberof UserDto
   */
  nameLast?: string
  /**
   * User profile type
   * @type {string}
   * @memberof UserDto
   */
  type: UserDtoTypeEnum
  /**
   * User associated sub-accounts: crypto wallet account (EOA), email, social network, oauth2, etc
   * @type {Array<UserAccountDto>}
   * @memberof UserDto
   */
  account: Array<UserAccountDto>
  /**
   * Unique user ID
   * @type {number}
   * @memberof UserDto
   */
  id: number
  /**
   * User profile general status
   * @type {string}
   * @memberof UserDto
   */
  status: UserDtoStatusEnum
  /**
   * User unique handle
   * @type {string}
   * @memberof UserDto
   */
  handle: string
  /**
   * Last time the user info were updated
   * @type {Date}
   * @memberof UserDto
   */
  updatedAt?: Date
  /**
   * User creation timestamp
   * @type {Date}
   * @memberof UserDto
   */
  createdAt?: Date
}

/**
 * @export
 */
export const UserDtoTypeEnum = {
  Individual: 'individual',
  Business: 'business',
} as const
export type UserDtoTypeEnum = (typeof UserDtoTypeEnum)[keyof typeof UserDtoTypeEnum]

/**
 * @export
 */
export const UserDtoStatusEnum = {
  Valid: 'valid',
  Blocked: 'blocked',
  Pending: 'pending',
  Unknown: 'unknown',
} as const
export type UserDtoStatusEnum =
  (typeof UserDtoStatusEnum)[keyof typeof UserDtoStatusEnum]

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): boolean {
  if (!('name' in value)) return false
  if (!('type' in value)) return false
  if (!('account' in value)) return false
  if (!('id' in value)) return false
  if (!('status' in value)) return false
  if (!('handle' in value)) return false
  return true
}

export function UserDtoFromJSON(json: any): UserDto {
  return UserDtoFromJSONTyped(json, false)
}

export function UserDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): UserDto {
  if (json == null) {
    return json
  }
  return {
    name: json['name'],
    nameLast: json['nameLast'] == null ? undefined : json['nameLast'],
    type: json['type'],
    account: (json['account'] as Array<any>).map(UserAccountDtoFromJSON),
    id: json['id'],
    status: json['status'],
    handle: json['handle'],
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
  }
}

export function UserDtoToJSON(value?: UserDto | null): any {
  if (value == null) {
    return value
  }
  return {
    name: value['name'],
    nameLast: value['nameLast'],
    type: value['type'],
    account: (value['account'] as Array<any>).map(UserAccountDtoToJSON),
    id: value['id'],
    status: value['status'],
    handle: value['handle'],
    updatedAt:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    createdAt:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
  }
}

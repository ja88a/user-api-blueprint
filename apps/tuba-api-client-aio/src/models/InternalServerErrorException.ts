/* tslint:disable */
/* eslint-disable */
/**
 * TUBA API
 * TUBA by Jabba Ã¸1 - OpenAPI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tuba.support@none.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface InternalServerErrorException
 */
export interface InternalServerErrorException {
  /**
   * Timestamp of the exception
   * @type {Date}
   * @memberof InternalServerErrorException
   */
  timestamp: Date
  /**
   * Trace ID of the request
   * @type {string}
   * @memberof InternalServerErrorException
   */
  traceId: string
  /**
   * A unique code identifying the error.
   * @type {number}
   * @memberof InternalServerErrorException
   */
  code: InternalServerErrorExceptionCodeEnum
  /**
   * Message for the exception
   * @type {string}
   * @memberof InternalServerErrorException
   */
  message: string
  /**
   * A description of the error message.
   * @type {string}
   * @memberof InternalServerErrorException
   */
  description: string
}

/**
 * @export
 */
export const InternalServerErrorExceptionCodeEnum = {
  NUMBER_30001: 30001,
  NUMBER_30002: 30002,
  NUMBER_30003: 30003,
  NUMBER_30004: 30004,
  NUMBER_30005: 30005,
  NUMBER_30006: 30006,
} as const
export type InternalServerErrorExceptionCodeEnum =
  (typeof InternalServerErrorExceptionCodeEnum)[keyof typeof InternalServerErrorExceptionCodeEnum]

/**
 * Check if a given object implements the InternalServerErrorException interface.
 */
export function instanceOfInternalServerErrorException(value: object): boolean {
  if (!('timestamp' in value)) return false
  if (!('traceId' in value)) return false
  if (!('code' in value)) return false
  if (!('message' in value)) return false
  if (!('description' in value)) return false
  return true
}

export function InternalServerErrorExceptionFromJSON(
  json: any,
): InternalServerErrorException {
  return InternalServerErrorExceptionFromJSONTyped(json, false)
}

export function InternalServerErrorExceptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): InternalServerErrorException {
  if (json == null) {
    return json
  }
  return {
    timestamp: new Date(json['timestamp']),
    traceId: json['traceId'],
    code: json['code'],
    message: json['message'],
    description: json['description'],
  }
}

export function InternalServerErrorExceptionToJSON(
  value?: InternalServerErrorException | null,
): any {
  if (value == null) {
    return value
  }
  return {
    timestamp: value['timestamp'].toISOString(),
    traceId: value['traceId'],
    code: value['code'],
    message: value['message'],
    description: value['description'],
  }
}
